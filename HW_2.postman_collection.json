{
	"info": {
		"_postman_id": "4ff97401-bb59-41f6-a52b-0d1e62f01ed0",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18822699"
	},
	"item": [
		{
			"name": "first_request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let resp_f = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name\", function () {  \r",
							"    pm.expect(\"Vitaliy\").to.eql(resp_f.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age\", function () {  \r",
							"    pm.expect(32).to.eql(+resp_f.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary\", function () {  \r",
							"    pm.expect(1000).to.eql(+resp_f.salary);\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"let req_f = pm.request\r",
							"console.log(req_f)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req_f.body.formdata.one(\"name\").value\r",
							"console.log(req_name)\r",
							"\r",
							"pm.test(\"Name_req\", function () {  \r",
							"    pm.expect(req_name).to.eql(resp_f.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_req\", function () {  \r",
							"    pm.expect(+req_f.body.formdata.one(\"age\").value).to.eql(+resp_f.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"salary_req\", function () {  \r",
							"    pm.expect(+req_f.body.formdata.one(\"salary\").value).to.eql(+resp_f.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(resp_f.family)\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year\", function () {   \r",
							"    pm.expect((+req_f.body.formdata.one(\"salary\").value)*4).to.eql(resp_f.family.u_salary_1_5_year); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vitaliy",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let resp_f = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let req_f = pm.request\r",
							"console.log(req_f)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req_f.url.query.one(\"name\").value\r",
							"console.log(req_name)\r",
							"\r",
							"pm.test(\"Name_req\", function () {  \r",
							"    pm.expect(req_name).to.eql(resp_f.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_req\", function () {  \r",
							"    pm.expect(+req_f.url.query.one(\"age\").value).to.eql(+resp_f.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"salary_req\", function () {  \r",
							"    pm.expect(+req_f.url.query.one(\"salary\").value).to.eql(+resp_f.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(resp_f.family)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog_name\", function () {  \r",
							"    pm.expect(resp_f.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog_age\", function () {  \r",
							"    pm.expect(resp_f.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog_name_Luky\", function () {  \r",
							"    pm.expect(\"Luky\").to.eql(resp_f.family.pets.dog.name);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog_age_Luky\", function () {  \r",
							"    pm.expect(4).to.eql(+resp_f.family.pets.dog.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vitaliy&age=32&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vitaliy"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let resp_f = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let req_f = pm.request\r",
							"console.log(req_f)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Name_req\", function () {  \r",
							"    pm.expect(req_f.url.query.one(\"name\").value).to.eql(resp_f.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_req\", function () {  \r",
							"    pm.expect(+req_f.url.query.one(\"age\").value).to.eql(+resp_f.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(req_f.url.query.one(\"salary\").value)\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(resp_f.salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp_f.salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_f.salary[1])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_f.salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary[0]\", function () {  \r",
							"    pm.expect(+req_f.url.query.one(\"salary\").value).to.eql(+resp_f.salary[0]);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary[1]\", function () {  \r",
							"    pm.expect((+req_f.url.query.one(\"salary\").value)*2).to.eql(+resp_f.salary[1]);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary[2]\", function () {  \r",
							"    pm.expect((+req_f.url.query.one(\"salary\").value)*3).to.eql(+resp_f.salary[2]);\r",
							"});\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let i = 0\r",
							"while (i < 3) {\r",
							"    console.log(resp_f.salary[i])\r",
							"    i = i + 1\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Vitaliy&age=32&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vitaliy"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let resp_f = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let req_f = pm.request\r",
							"console.log(req_f)\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"resp start_qa_salary\", function () {  \r",
							"    pm.expect(resp_f).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"resp salary_after_6_qa_salary\", function () {  \r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"resp salary_after_12_qa_salary\", function () {  \r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"resp salary_after_1.5_qa_salary\", function () {  \r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"resp salary_after_3.5_qa_salary\", function () {  \r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"resp person\", function () {  \r",
							"    pm.expect(resp_f).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"resp start_qa_salary with req\", function () {\r",
							"    pm.expect(+req_f.body.formdata.one(\"salary\").value).to.eql(+resp_f.start_qa_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"resp salary_after_6_months\", function () {\r",
							"    pm.expect((+req_f.body.formdata.one(\"salary\").value)*2).to.eql(+resp_f.qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"resp salary_after_12_months\", function () {\r",
							"    pm.expect((+req_f.body.formdata.one(\"salary\").value)*2.7).to.eql(+resp_f.qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"resp salary_after_1.5_year\", function () {\r",
							"    pm.expect((+req_f.body.formdata.one(\"salary\").value)*3.3).to.eql(+resp_f[\"qa_salary_after_1.5_year\"]);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"resp salary_after_3.5_year\", function () {\r",
							"    pm.expect((+req_f.body.formdata.one(\"salary\").value)*3.8).to.eql(+resp_f[\"qa_salary_after_3.5_years\"]);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name[1]\", function () {  \r",
							"    pm.expect(+req_f.body.formdata.one(\"salary\").value).to.eql(+resp_f.person.u_name[1]);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"req u_age\", function () {  \r",
							"    pm.expect(+req_f.body.formdata.one(\"age\").value).to.eql(+resp_f.person.u_age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"resp u_salary_5_years\", function () {\r",
							"    pm.expect((+req_f.body.formdata.one(\"salary\").value)*4.2).to.eql(+resp_f.person.u_salary_5_years);\r",
							"});\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (key in resp_f.person) {\r",
							"    console.log(key, resp_f.person[key])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip-port}}/user_info_2",
					"host": [
						"{{ip-port}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}